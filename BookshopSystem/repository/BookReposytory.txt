package bookshopsystemapp.repository;

import bookshopsystemapp.domain.entities.AgeRestriction;
import bookshopsystemapp.domain.entities.Book;
import bookshopsystemapp.domain.entities.ReduceBook;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import javax.persistence.criteria.CriteriaBuilder;
import javax.print.attribute.standard.Copies;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;

@Repository
public interface BookRepository extends JpaRepository<Book, Integer> {

    List<Book> findAllByReleaseDateAfter(LocalDate date);

    List<Book> findAllByReleaseDateBefore(LocalDate date);

    List<Book> findAllByAgeRestriction(AgeRestriction ageRestriction);

    List<Book> findAllByCopiesIsLessThan(Integer copies);

    List<Book> findAllByPriceLessThanOrPriceGreaterThan(BigDecimal price, BigDecimal priceTwo);

    List<Book> findAllByReleaseDateBeforeOrReleaseDateAfter(LocalDate before, LocalDate after);

    List<Book> findAllByTitleContains(String symbol);

    @Query(value = "SELECT b FROM books b JOIN b.author a WHERE a.lastName LIKE :wildcard")
    List<Book> findBooksWithAuthor(@Param(value = "wildcard") String wildcard);

    @Query(value = "SELECT count (b) FROM books b where LENGTH(b.title) >= :length ")
    int countAllByTitleIsGreaterThan(@Param(value = "length") int titleNumber);

    @Query("SELECT new bookshopsystemapp.domain.entities.ReduceBook(b.title, b.editionType, b.ageRestriction, b.price) FROM books b WHERE b.title = :title")
    ReduceBook getProjectionForTitle(@Param(value = "title") String title);

    //12 задача
    @Modifying
    @Query("update Book b set b.copies = b.copies + :num where b.id = :id")
    void increaseCopies(@Param(value = "id") int id, @Param(value = "num") long num);

    //13 задача
    @Query("delete from Book b where b.copies < :copies")
    List<Book> deleteWithCopiesLowerThan(@Param(value = "copies") Long copies);

    //14задача
    
}
